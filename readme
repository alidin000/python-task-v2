# Python Task V2

## Project Structure

```
.
├── alembic/
├── app/
│   ├── __pycache__/
│   ├── auth.py
│   ├── crud.py
│   ├── database.py
│   ├── deps.py
│   ├── main.py
│   ├── models.py
│   ├── moderation.py
│   ├── schemas.py
├── bot/
│   ├── __pycache__/
│   ├── bot.py
│   ├── config.py
│   ├── template_config.py
│   ├── tests/
├── venv/
├── .gitignore
├── alembic.ini
├── init_db.py
├── readme
├── requirements.txt
└── test.db
```

## 1. Set Up a Virtual Environment

Create and activate a Python virtual environment:

### On Windows:

```bash
python -m venv venv
venv\Scripts\activate
```

### On macOS/Linux:

```bash
python3 -m venv venv
source venv/bin/activate
```

## 2. Install Dependencies

Install the necessary Python packages:

```bash
pip install -r requirements.txt
```

## 3. Set Up Google Cloud Credentials

Ensure you have a Google Cloud service account key file (JSON) and set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.

### On Windows:

```bash
set GOOGLE_APPLICATION_CREDENTIALS=C:\path\to\your\service-account-file.json
```

### On macOS/Linux:

```bash
export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-file.json"
```

## 4. Apply Migrations

Use Alembic to apply database migrations:

```bash
alembic upgrade head
```

## 5. Initialize the Database

Run the following script to initialize the database:

```bash
python init_db.py
```

## 6. Environment Variables

Create a `.env` file in the project root and add the following variables:

```bash
GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-file.json"
```

Add any other environment-specific variables you need for your FastAPI settings.

## Usage

### Running the FastAPI Server

Start the FastAPI development server:

```bash
uvicorn app.main:app --reload
```

The API will be available at [http://127.0.0.1:8000](http://127.0.0.1:8000).

### API Endpoints

- **User Registration:** `/auth/register/` - Register a new user.
- **User Login:** `/auth/login/` - Authenticate an existing user.
- **Post Management:** `/posts/` - CRUD operations for posts.
- **Comment Management:** `/comments/` - CRUD operations for comments with AI moderation.
- **Comment Analytics:** `/comments-daily-breakdown?date_from=YYYY-MM-DD&date_to=YYYY-MM-DD` - Get daily aggregated comment data.
- **Automatic Response to Comments:** Endpoint and logic for enabling auto-response to comments after a delay.

### Running the Bot

Run the Python bot to generate and send posts and comments:

```bash
python bot/bot.py
```

Configure the bot within the script for the number of users, the nature of comments (positive/negative), and the number of posts and comments per user.

### Running Tests

To run the test suite:

```bash
pytest
```

This will execute tests for post creation, analytics, and other aspects of the application.

## Contributing

1. Fork the repository.
2. Create a feature branch (`git checkout -b feature-branch`).
3. Commit your changes (`git commit -m 'Add some feature'`).
4. Push to the branch (`git push origin feature-branch`).
5. Open a Pull Request.